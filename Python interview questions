{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "243ce0bd-a8a8-4224-a42b-9047309dce22",
   "metadata": {},
   "source": [
    "\n",
    "1.What is Python? List some popular applications of Python in the world of technology.\n",
    "Python is a widely-used general-purpose, high-level programming language. It was created by Guido van Rossum in 1991 and further developed by the Python Software Foundation. It was designed with an emphasis on code readability, and its syntax allows programmers to express their concepts in fewer lines of code.\n",
    "It is used for:System Scripting,Web Development,Game Development,Software Development,Complex Mathematics\n",
    "\n",
    "2. What are the benefits of using Python language as a tool in the present scenario?\n",
    "The following are the benefits of using Python language:\n",
    "Object-Oriented Language\n",
    "High-Level Language\n",
    "Presence of third-party modules\n",
    "Open source and community development\n",
    "Portable and Interactive\n",
    "Portable across Operating systems\n",
    "\n",
    "3. Is Python a compiled language or an interpreted language?\n",
    "Actually, Python is a partially compiled language and partially interpreted language. The compilation part is done first when we execute our code and this will generate byte code internally this byte code gets converted by the Python virtual machine(p.v.m) according to the underlying platform(machine+operating system).\n",
    "\n",
    "4. What does the ‘#’ symbol do in Python?\n",
    "‘#’ is used to comment on everything that comes after on the line.\n",
    "\n",
    "5. What is the difference between a Mutable datatype and an Immutable data type?\n",
    "Mutable data types can be edited i.e., they can change at runtime. Eg – List, Dictionary, etc.\n",
    "Immutable data types can not be edited i.e., they can not change at runtime. Eg – String, Tuple, etc.\n",
    "\n",
    "6. How are arguments passed by value or by reference in Python?\n",
    "Everything in Python is an object and all variables hold references to the objects. The reference values are according to the functions; as a result, you cannot change the value of the references. However, you can change the objects if it is mutable.\n",
    "\n",
    "7. What is the difference between a Set and Dictionary?\n",
    "The set is an unordered collection of data types that is iterable, mutable and has no duplicate elements.\n",
    "A dictionary in Python is an ordered collection of data values, used to store data values like a map.\n",
    "\n",
    "8. What is List Comprehension? Give an Example.\n",
    "List comprehension is a syntax construction to ease the creation of a list based on existing iterable.\n",
    "For Example:\n",
    "my_list = [i for i in range(1, 10)]\n",
    "\n",
    "9. What is a lambda function?\n",
    "A lambda function is an anonymous function. This function can have any number of parameters but, can have just one statement. For Example:\n",
    "a = lambda x, y : x*y\n",
    "print(a(7, 19))\n",
    "\n",
    "10. What is a pass in Python?\n",
    "Pass means performing no operation or in other words, it is a placeholder in the compound statement, where there should be a blank left and nothing has to be written there.\n",
    "\n",
    "11. What is the difference between / and // in Python?\n",
    "/ represents precise division (result is a floating point number) whereas // represents floor division (result is an integer). For Example:\n",
    "5//2 = 2\n",
    "5/2 = 2.5\n",
    "\n",
    "12. How is Exceptional handling done in Python?\n",
    "There are 3 main keywords i.e. try, except, and finally which are used to catch exceptions and handle the recovering mechanism accordingly. Try is the block of a code that is monitored for errors. Except block gets executed when an error occurs.\n",
    "The beauty of the final block is to execute the code after trying for an error. This block gets executed irrespective of whether an error occurred or not. Finally, block is used to do the required cleanup activities of objects/variables.\n",
    "\n",
    "13. What is swapcase function in Python?\n",
    "It is a string’s function that converts all uppercase characters into lowercase and vice versa. It is used to alter the existing case of the string. This method creates a copy of the string which contains all the characters in the swap case. For Example:\n",
    "string = \"GeeksforGeeks\"\n",
    "string.swapcase() ---> \"gEEKSFORgEEKS\"\n",
    "\n",
    "14. Difference between for loop and while loop in Python\n",
    "The “for” Loop is generally used to iterate through the elements of various collection types such as List, Tuple, Set, and Dictionary. Developers use a “for” loop where they have both the conditions start and the end. Whereas, the “while” loop is the actual looping feature that is used in any other programming language. Programmers use a Python while loop where they just have the end conditions.\n",
    "\n",
    "15. Can we Pass a function as an argument in Python?\n",
    "Yes, Several arguments can be passed to a function, including objects, variables (of the same or distinct data types), and functions. Functions can be passed as parameters to other functions because they are objects. Higher-order functions are functions that can take other functions as arguments.\n",
    "\n",
    "16. Is Indentation Required in Python?\n",
    "Yes, indentation is required in Python. A Python interpreter can be informed that a group of statements belongs to a specific block of code by using Python indentation. Indentations make the code easy to read for developers in all programming languages but in Python, it is very important to indent the code in a specific order.\n",
    "\n",
    "17. What is Scope in Python?\n",
    "The location where we can find a variable and also access it if required is called the scope of a variable.\n",
    "Python Local variable: Local variables are those that are initialized within a function and are unique to that function. It cannot be accessed outside of the function.\n",
    "Python Global variables: Global variables are the ones that are defined and declared outside any function and are not specified to any function.\n",
    "Module-level scope: It refers to the global objects of the current module accessible in the program.\n",
    "Outermost scope: It refers to any built-in names that the program can call. The name referenced is located last among the objects in this scope.\n",
    "\n",
    "18. What is a break, continue, and pass in Python? \n",
    "The break statement is used to terminate the loop or statement in which it is present. After that, the control will pass to the statements that are present after the break statement, if available.\n",
    "Continue is also a loop control statement just like the break statement. continue statement is opposite to that of the break statement, instead of terminating the loop, it forces to execute the next iteration of the loop.\n",
    "Pass means performing no operation or in other words, it is a placeholder in the compound statement, where there should be a blank left and nothing has to be written there.\n",
    "\n",
    "19. What are Built-in data types in Python?\n",
    "The following are the standard or built-in data types in Python:\n",
    "Numeric: The numeric data type in Python represents the data that has a numeric value. A numeric value can be an integer, a floating number, a Boolean, or even a complex number.\n",
    "Sequence Type: The sequence Data Type in Python is the ordered collection of similar or different data types. There are several sequence types in Python:\n",
    "Python String\n",
    "Python List\n",
    "Python Tuple\n",
    "Python range\n",
    "Mapping Types: In Python, hashable data can be mapped to random objects using a mapping object. There is currently only one common mapping type, the dictionary, and mapping objects are mutable.\n",
    "Python Dictionary\n",
    "Set Types: In Python, a Set is an unordered collection of data types that is iterable, mutable, and has no duplicate elements. The order of elements in a set is undefined though it may consist of various elements.\n",
    "\n",
    "20. How do you floor a number in Python?\n",
    "The Python math module includes a method that can be used to calculate the floor of a number. \n",
    "floor()\n",
    "method in Python returns the floor of x i.e., the largest integer not greater than x. \n",
    "Also, The method ceil(x) in Python returns a ceiling value of x i.e., the smallest integer greater than or equal to x.\n",
    "\n",
    "21. Differentiate between List and Tuple?\n",
    "Let’s analyze the differences between List and Tuple:\n",
    "List:\n",
    "Lists are Mutable datatype.\n",
    "Lists consume more memory\n",
    "The list is better for performing operations, such as insertion and deletion.\n",
    "The implication of iterations is Time-consuming\n",
    "Tuple:\n",
    "Tuples are Immutable datatype.\n",
    "Tuple consumes less memory as compared to the list\n",
    "A Tuple data type is appropriate for accessing the elements\n",
    "The implication of iterations is comparatively Faster\n",
    "\n",
    "22. What are Iterators in Python?\n",
    "In Python, iterators are used to iterate a group of elements, containers like a list. Iterators are collections of items, and they can be a list, tuples, or a dictionary. Python iterator implements _itr_ and the next() method to iterate the stored elements. We generally use loops to iterate over the collections (list, tuple) in Python.\n",
    "\n",
    "23. Does Python supports multiple Inheritance?\n",
    "Python does support multiple inheritances, unlike Java. Multiple inheritances mean that a class can be derived from more than one parent class.\n",
    "\n",
    "24. What is Polymorphism in Python?\n",
    "Polymorphism means the ability to take multiple forms. So, for instance, if the parent class has a method named ABC then the child class also can have a method with the same name ABC having its own parameters and variables. Python allows polymorphism.\n",
    "\n",
    "25. Define encapsulation in Python?\n",
    "Encapsulation means binding the code and the data together. A Python class is an example of encapsulation.\n",
    "\n",
    "26. How do you do data abstraction in Python?\n",
    "Data Abstraction is providing only the required details and hides the implementation from the world. It can be achieved in Python by using interfaces and abstract classes.\n",
    "\n",
    "27. How is memory management done in Python?\n",
    "Python uses its private heap space to manage the memory. Basically, all the objects and data structures are stored in the private heap space. Even the programmer can not access this private space as the interpreter takes care of this space. Python also has an inbuilt garbage collector, which recycles all the unused memory and frees the memory and makes it available to the heap space.\n",
    "\n",
    "28. How to delete a file using Python?\n",
    "We can delete a file using Python by following approaches:\n",
    "os.remove()\n",
    "os.unlink()\n",
    "\n",
    "29. What is slicing in Python?\n",
    "Python Slicing is a string operation for extracting a part of the string, or some part of a list. With this operator, one can specify where to start the slicing, where to end, and specify the step. List slicing returns a new list from the existing list.\n",
    "Syntax: Lst[ Initial : End : IndexJump ]\n",
    "\n",
    "30. What is a namespace in Python?\n",
    "A namespace is a naming system used to make sure that names are unique to avoid naming conflicts.\n",
    "\n",
    "31. What is _init_() in Python?\n",
    "Equivalent to constructors in OOP terminology, _init_ is a reserved method in Python classes. The _init_ method is called automatically whenever a new object is initiated. This method allocates memory to the new object as soon as it is created. This method can also be used to initialize variables.\n",
    "\n",
    "32. Write a code to display the current time?\n",
    "import time\n",
    "currenttime= time.localtime(time.time())\n",
    "print (“Current time is”, currenttime)\n",
    "\n",
    "33. Python Global Interpreter Lock (GIL)?\n",
    "Python Global Interpreter Lock (GIL) is a type of process lock that is used by Python whenever it deals with processes. Generally, Python only uses only one thread to execute the set of written statements. The performance of the single-threaded process and the multi-threaded process will be the same in Python and this is because of GIL in Python. We can not achieve multithreading in Python because we have a global interpreter lock that restricts the threads and works as a single thread.\n",
    "\n",
    "34. What are the differences between Python 2 and Python 3?\n",
    "Python 2 and Python 3 are two major versions of the language. Unlike Python 3, Python 2 is no longer supported starting from 2020.\n",
    "Some of the main differences between them are:\n",
    "Print function: In Python 2, print is a statement, while in Python 3, it is a function.\n",
    "Division: In Python 2, the division of integers results in an integer, while in Python 3, it results in a float.\n",
    "Unicode support: Python 3 has better Unicode support with all strings being Unicode by default.\n",
    "xrange() function: In Python 2, xrange() is used for efficient looping, while in Python 3, range() serves the same purpose and xrange() is removed.\n",
    "\n",
    "35. What are Python data types?\n",
    "Python has several built-in data types, including:\n",
    "Numeric: int, float, complex\n",
    "Sequence: list, tuple, range\n",
    "Text: str\n",
    "Mapping: dict\n",
    "Set: set, frozenset\n",
    "Boolean: bool\n",
    "Binary: bytes, bytearray, memoryview\n",
    "Data types in Python: good Python interview questions\n",
    "\n",
    "36. What is the difference between == and is in Python?\n",
    "== is an equality operator that compares the values of two objects, while is is an identity operator that checks if two objects are the same in memory.\n",
    "What is the difference between __str__ and __repr__ in Python?\n",
    "__str__ and __repr__ are special methods in Python that define human-readable and unambiguous string representations of an object, respectively. Typically, __str__ is regarded as \"user-oriented\" and _repr_ is regarded as \"programmer-oriented\". The __str__ method is called by the str() function and the print() function, while the __repr__ method is called by the repr() function and the interactive interpreter. If __str__ is not defined for a class, Python will use __repr__ as a fallback.\n",
    "\n",
    "37. What is the purpose of the __call__ method in Python?\n",
    "The __call__ method is a special method in Python that allows an object to be called as a function. When an object is called as a function, the __call__ method is executed. This can be useful for creating objects that behave like functions, such as decorators or function factories.\n",
    "\n",
    "38. How would you find the most common elements in a list?\n",
    "You can use the collections.Counter class to count the occurrences of elements in the list and then use the most_common() method to find the most common elements:\n",
    "from collections import Counter\n",
    "my_list = [1, 2, 3, 2, 1, 3, 1, 1, 2, 3, 4, 5]\n",
    "counter = Counter(my_list)\n",
    "most_common_elements = counter.most_common()\n",
    "\n",
    "39.How would you merge two dictionaries in Python?\n",
    "You can use the update() method or dictionary unpacking to merge two dictionaries:\n",
    "dict1 = {\"a\": 1, \"b\": 2}\n",
    "dict2 = {\"b\": 3, \"c\": 4}\n",
    "# Using update()\n",
    "merged_dict = dict1.copy()\n",
    "merged_dict.update(dict2)\n",
    "# Using dictionary unpacking (Python 3.5+)\n",
    "merged_dict = {**dict1, **dict2}\n",
    "\n",
    "40. How do you install Python and set up a development environment?*\n",
    "You can install Python from [python.org](https://www.python.org/). For setting up a development environment, you can use IDEs like PyCharm, VS Code, or Jupyter Notebook. Ensure you add Python to your PATH during installation.\n",
    "\n",
    "41. What are Python's key features?*\n",
    "- Interpreted language\n",
    "- Dynamically typed\n",
    "- High-level language\n",
    "- Object-oriented\n",
    "- Extensive standard library\n",
    "- Portability\n",
    "- GUI programming support\n",
    "- Integrated and interactive\n",
    "\n",
    "43. What is PEP 8 and why is it important?*\n",
    "PEP 8 is the Python Enhancement Proposal that provides guidelines and best practices for writing Python code. It helps maintain the readability and consistency of the codebase.\n",
    "\n",
    "44. What is a dictionary in Python? How is it different from a list?*\n",
    "A dictionary is an unordered collection of key-value pairs. Each key is unique and is used to store and retrieve corresponding values. Differences from lists:\n",
    "- Dictionaries use curly braces {} and key-value pairs, e.g., {\"key\": \"value\"}.\n",
    "- Lists are ordered collections of elements indexed by positions (integers).\n",
    "\n",
    "45. How do you define a function in Python?*\n",
    "python\n",
    "def function_name(parameters):\n",
    "    \"\"\"docstring\"\"\"\n",
    "    statement(s)\n",
    "\n",
    "Example:\n",
    "python\n",
    "def greet(name):\n",
    "    print(f\"Hello, {name}!\")\n",
    "\n",
    "46. What are *args and **kwargs?*\n",
    "- *args is used to pass a variable number of non-keyword arguments to a function.\n",
    "- **kwargs is used to pass a variable number of keyword arguments to a function.\n",
    "\n",
    "Example:\n",
    "python\n",
    "def demo_function(*args, **kwargs):\n",
    "    print(args)\n",
    "    print(kwargs)\n",
    "\n",
    "demo_function(1, 2, 3, key1=\"value1\", key2=\"value2\")\n",
    "\n",
    "47. What is a class in Python? How do you create one?*\n",
    "A class is a blueprint for creating objects. It defines a set of attributes and methods that the objects created from the class will have.\n",
    "Example:\n",
    "python\n",
    "class MyClass:\n",
    "    def __init__(self, attribute):\n",
    "        self.attribute = attribute\n",
    "    \n",
    "    def method(self):\n",
    "        return f\"Attribute is {self.attribute}\"\n",
    "\n",
    "obj = MyClass(\"value\")\n",
    "print(obj.method())\n",
    "\n",
    "48. How do you handle exceptions in Python?*\n",
    "Using try and except blocks:\n",
    "python\n",
    "try:\n",
    "    # code that may raise an exception\n",
    "    result = 10 / 0\n",
    "except ZeroDivisionError:\n",
    "    # code that runs if an exception occurs\n",
    "    print(\"Cannot divide by zero!\")\n",
    "\n",
    "49. What is a generator in Python?*\n",
    "A generator is a function that returns an iterator that yields values one at a time, allowing for iteration over potentially large datasets without loading them into memory.\n",
    "Example:\n",
    "python\n",
    "def my_generator():\n",
    "    yield 1\n",
    "    yield 2\n",
    "    yield 3\n",
    "\n",
    "gen = my_generator()\n",
    "print(next(gen))  # 1\n",
    "print(next(gen))  # 2\n",
    "print(next(gen))  # 3\n",
    "\n",
    "\n",
    "50. Explain the concept of decorators in Python.*\n",
    "Decorators are a way to modify the behavior of a function or class method. They are typically used to add functionality to an existing function.\n",
    "Example:\n",
    "python\n",
    "def decorator_function(original_function):\n",
    "    def wrapper_function(*args, **kwargs):\n",
    "        print(\"Wrapper executed before\", original_function.__name__)\n",
    "        return original_function(*args, **kwargs)\n",
    "    return wrapper_function\n",
    "\n",
    "@decorator_function\n",
    "def display():\n",
    "    print(\"Display function ran\")\n",
    "display()\n",
    "\n",
    "51. What is Object Oriented Programming (OOPs)?\n",
    "Object Oriented Programming (also known as OOPs) is a programming paradigm where the complete software operates as a bunch of objects talking to each other. An object is a collection of data and the methods which operate on that data.\n",
    "\n",
    "52. Why OOPs?\n",
    "The main advantage of OOP is better manageable code that covers the following:\n",
    "The overall understanding of the software is increased as the distance between the language spoken by developers and that spoken by users.\n",
    "Object orientation eases maintenance by the use of encapsulation.  One can easily change the underlying representation by keeping the methods the same.\n",
    "The OOPs paradigm is mainly useful for relatively big software.\n",
    "\n",
    "53. What is a Class?\n",
    "A class is a building block of Object Oriented Programs. It is a user-defined data type that contains the data members and member functions that operate on the data members. It is like a blueprint or template of objects having common properties and methods.\n",
    "\n",
    "54. What is an Object?\n",
    "An object is an instance of a class. Data members and methods of a class cannot be used directly. We need to create an object (or instance) of the class to use them. In simple terms, they are the actual world entities that have a state and behavior.\n",
    "\n",
    "55. What are the main features of OOPs?\n",
    "The main feature of the OOPs, also known as 4 pillars or basic principles of OOPs are as follows:\n",
    "Encapsulation\n",
    "Data Abstraction\n",
    "Polymorphism\n",
    "Inheritance\n",
    "\n",
    "56. What is Encapsulation?\n",
    "Encapsulation is the binding of data and methods that manipulate them into a single unit such that the sensitive data is hidden from the users\n",
    "It is implemented as the processes mentioned below:\n",
    "Data hiding: A language feature to restrict access to members of an object. For example, private and protected members in C++.\n",
    "Bundling of data and methods together: Data and methods that operate on that data are bundled together. For example, the data members and member methods that operate on them are wrapped into a single unit known as a class.\n",
    "encapsulation\n",
    "\n",
    "57. What is Abstraction?\n",
    "Abstraction is similar to data encapsulation and is very important in OOP. It means showing only the necessary information and hiding the other irrelevant information from the user. Abstraction is implemented using classes and interfaces.\n",
    "\n",
    "58. What is Polymorphism?\n",
    "The word “Polymorphism” means having many forms. It is the property of some code to behave differently for different contexts. For example, in C++ language, we can define multiple functions having the same name but different working depending on the context.\n",
    "Polymorphism can be classified into two types based on the time when the call to the object or function is resolved. They are as follows:\n",
    "A) Compile-Time Polymorphism\n",
    "Compile time polymorphism, also known as static polymorphism or early binding is the type of polymorphism where the binding of the call to its code is done at the compile time. Method overloading or operator overloading are examples of compile-time polymorphism.\n",
    "B) Runtime Polymorphism\n",
    "Also known as dynamic polymorphism or late binding, runtime polymorphism is the type of polymorphism where the actual implementation of the function is determined during the runtime or execution. Method overriding is an example of this method.\n",
    "\n",
    "59. What is Inheritance? What is its purpose?\n",
    "The idea of inheritance is simple, a class is derived from another class and uses data and implementation of that other class. The class which is derived is called child or derived or subclass and the class from which the child class is derived is called parent or base or superclass.\n",
    "The main purpose of Inheritance is to increase code reusability. It is also used to achieve Runtime Polymorphism.\n",
    "\n",
    "60. What are access specifiers? What is their significance in OOPs?\n",
    "Access specifiers are special types of keywords that are used to specify or control the accessibility of entities like classes, methods, and so on. Private, Public, and Protected are examples of access specifiers or access modifiers.\n",
    "The key components of OOPs, encapsulation and data hiding, are largely achieved because of these access specifiers.\n",
    "\n",
    "61. What other paradigms of programming exist besides OOPs?\n",
    "The programming paradigm is referred to the technique or approach of writing a program. The programming paradigms can be classified into the following types:\n",
    "Programming Paradigms\n",
    "1. Imperative Programming Paradigm: It is a programming paradigm that works by changing the program state through assignment statements. The main focus in this paradigm is on how to achieve the goal. The following programming paradigms come under this category:\n",
    "Procedural Programming Paradigm: This programming paradigm is based on the procedure call concept. Procedures, also known as routines or functions are the basic building blocks of a program in this paradigm.\n",
    "Object-Oriented Programming or OOP: In this paradigm, we visualize every entity as an object and try to structure the program based on the state and behavior of that object.\n",
    "Parallel Programming: The parallel programming paradigm is the processing of instructions by dividing them into multiple smaller parts and executing them concurrently.\n",
    "2. Declarative Programming Paradigm\n",
    "Declarative programming focuses on what is to be executed rather than how it should be executed. In this paradigm, we express the logic of a computation without considering its control flow. The declarative paradigm can be further classified into:\n",
    "Logical Programming Paradigm: It is based on formal logic where the program statements express the facts and rules about the problem in the logical form.\n",
    "Functional Programming Paradigm: Programs are created by applying and composing functions in this paradigm.\n",
    "Database Programming Paradigm: To manage data and information organized as fields, records, and files, database programming models are utilized.\n",
    "\n",
    "62. What are some commonly used Object Oriented Programming Languages?\n",
    "OOPs paradigm is one of the most popular programming paradigms. It is widely used in many popular programming languages such as:\n",
    "C++\n",
    "Java\n",
    "Python\n",
    "JavaScript\n",
    "C#\n",
    "Ruby\n",
    "\n",
    "63. What are the different types of Polymorphism?\n",
    "Polymorphism can be classified into two types based on the time when the call to the object or function is resolved. They are as follows:\n",
    "Compile Time Polymorphism\n",
    "Runtime Polymorphism\n",
    "types of polymorphism\n",
    "Types of Polymorphism\n",
    "A) Compile-Time Polymorphism\n",
    "Compile time polymorphism, also known as static polymorphism or early binding is the type of polymorphism where the binding of the call to its code is done at the compile time. Method overloading or operator overloading are examples of compile-time polymorphism.\n",
    "B) Runtime Polymorphism\n",
    "Also known as dynamic polymorphism or late binding, runtime polymorphism is the type of polymorphism where the actual implementation of the function is determined during the runtime or execution. Method overriding is an example of this method.\n",
    "\n",
    "64. What is the difference between overloading and overriding?\n",
    "A compile-time polymorphism feature called overloading allows an entity to have numerous implementations of the same name. Method overloading and operator overloading are two examples.\n",
    "Overriding is a form of runtime polymorphism where an entity with the same name but a different implementation is executed. It is implemented with the help of virtual functions.\n",
    "\n",
    "65. Are there any limitations on Inheritance?\n",
    "Yes, there are more challenges when you have more authority. Although inheritance is a very strong OOPs feature, it also has significant drawbacks.\n",
    "As it must pass through several classes to be implemented, inheritance takes longer to process.\n",
    "The base class and the child class, which are both engaged in inheritance, are also closely related to one another (called tightly coupled). Therefore, if changes need to be made, they may need to be made in both classes at the same time.\n",
    "Implementing inheritance might be difficult as well. Therefore, if not implemented correctly, this could result in unforeseen mistakes or inaccurate outputs.\n",
    "\n",
    "66. What different types of Inheritance are there?\n",
    "Inheritance can be classified into 5 types which are as follows:\n",
    "Types of Inheritance\n",
    "Single Inheritance: Child class derived directly from the base class\n",
    "Multiple Inheritance: Child class derived from multiple base classes.\n",
    "Multilevel Inheritance: Child class derived from the class which is also derived from another base class.\n",
    "Hierarchical Inheritance: Multiple child classes derived from a single base class.\n",
    "Hybrid Inheritance: Inheritance consisting of multiple inheritance types of the above specified.\n",
    "Note: Type of inheritance supported is dependent on the language. For example, Java does not support multiple inheritance.\n",
    "\n",
    "67. What is an interface?\n",
    "A unique class type known as an interface contains methods but not their definitions. Inside an interface, only method declaration is permitted. You cannot make objects using an interface. Instead, you must put that interface into use and specify the procedures for doing so.\n",
    "\n",
    "68. How is an abstract class different from an interface?\n",
    "Both abstract classes and interfaces are special types of classes that just include the declaration of the methods, not their implementation. An abstract class is completely distinct from an interface, though. Following are some major differences between an abstract class and an interface.\n",
    "Abstract Class\n",
    "Interface\n",
    "A class that is abstract can have both abstract and non-abstract methods.\tAn interface can only have abstract methods.\n",
    "An abstract class can have final, non-final, static and non-static variables.\tThe interface has only static and final variables.\n",
    "Abstract class doesn’t support multiple inheritance\tAn interface supports multiple inheritance.\n",
    "\n",
    "69. How much memory does a class occupy?\n",
    "Classes do not use memory. They merely serve as a template from which items are made. Now, objects actually initialize the class members and methods when they are created, using memory in the process.\n",
    "\n",
    "70. Is it always necessary to create objects from class?\n",
    "No. If the base class includes non-static methods, an object must be constructed. But no objects need to be generated if the class includes static methods. In this instance, you can use the class name to directly call those static methods.\n",
    "\n",
    "71. What is the difference between a structure and a class in C++?\n",
    "The structure is also a user-defined datatype in C++ similar to the class with the following differences:\n",
    "The major difference between a structure and a class is that in a structure, the members are set to public by default while in a class, members are private by default.\n",
    "The other difference is that we use struct for declaring structure and class for declaring a class in C++.\n",
    "OOPs Interview Questions and Answers \n",
    "\n",
    "72. What is Constructor?\n",
    "A constructor is a block of code that initializes the newly created object. A constructor resembles an instance method but it’s not a method as it doesn’t have a return type. It generally is the method having the same name as the class but in some languages, it might differ. For example:\n",
    "In python, a constructor is named _init_. \n",
    "In C++ and Java, the constructor is named the same as the class name.\n",
    "Example:\n",
    "class base {\n",
    "    public:\n",
    "        base() { cout << \"This is a constructor\"; }\n",
    "}\n",
    "\n",
    "73. What are the various types of constructors in C++?\n",
    "The most common classification of constructors includes:\n",
    "Default Constructor\n",
    "Non-Parameterized Constructor\n",
    "Parameterized Constructor\n",
    "Copy Constructor\n",
    "(1). Default Constructor\n",
    "The default constructor is a constructor that doesn’t take any arguments. It is a non-parameterized constructor that is automatically defined by the compiler when no explicit constructor definition is provided.It initializes the data members to their default values.\n",
    "(2). Non-Parameterized Constructor\n",
    "It is a user-defined constructor having no arguments or parameters.\n",
    "Example:\n",
    " class base {\n",
    "    base()\n",
    "    {\n",
    "        cout << \"This is a non-parameterized contructor\";\n",
    "    }\n",
    "}\n",
    "(3). Parameterized Constructor\n",
    "The constructors that take some arguments are known as parameterized constructors.\n",
    "Example:\n",
    " class base {\n",
    "public:\n",
    "    int base;\n",
    "    base(int var)\n",
    "    {\n",
    "        cout << \"Constructor with argument: \" << var;\n",
    "    }\n",
    "};\n",
    "(4). Copy Constructor\n",
    "A copy constructor is a member function that initializes an object using another object of the same class.\n",
    "Example:\n",
    " class base {\n",
    "    int a, b;\n",
    "    base(base& obj) // copy constructor\n",
    "    {\n",
    "        a = obj.a;\n",
    "        b = obj.b;\n",
    "    }\n",
    "}\n",
    "In Python, we do not have built-in copy constructors like Java and C++ but we can make a workaround using different methods.\n",
    "\n",
    "74. What is a destructor?\n",
    "A destructor is a method that is automatically called when the object is made of scope or destroyed.In C++, the destructor name is also the same as the class name but with the (~) tilde symbol as the prefix.In Python, the destructor is named _del_.\n",
    "Example:\n",
    " class base {\n",
    "public:\n",
    "    ~base() { cout << \"This is a destructor\"; }\n",
    "}\n",
    "In Java, the garbage collector automatically deletes the useless objects so there is no concept of destructor in Java. We could have used finalize() method as a workaround for the java destructor but it is also deprecated since Java 9.\n",
    "\n",
    "75. Can we overload the constructor in a class?\n",
    "Yes We can overload the constructor in a class in Java. Constructor Overloading is done when we want constructor with different constructor with different parameter(Number and Type).\n",
    "\n",
    "76. Can we overload the destructor in a class?\n",
    "No, a destructor cannot be overloaded in a class. The can only be one destructor present in a class.\n",
    "\n",
    "77. What is the virtual function?\n",
    "A virtual function is a function that is used to override a method of the parent class in the derived class. It is used to provide abstraction in a class.In C++, a virtual function is declared using the virtual keyword,In Java, every public, non-static, and non-final method is a virtual function.\n",
    "Python methods are always virtual.\n",
    "Example:\n",
    " class base {\n",
    "    virtual void print()\n",
    "    {\n",
    "        cout << \"This is a virtual function\";\n",
    "    }\n",
    "}\n",
    "\n",
    "78. What is pure virtual function?\n",
    "A pure virtual function, also known as an abstract function is a member function that doesn’t contain any statements. This function is defined in the derived class if needed.\n",
    "Example:\n",
    " class base {\n",
    "    virtual void pureVirFunc() = 0;\n",
    "}\n",
    "\n",
    "In Python, we achieve this using @abstractmethod from the ABC (Abstract Base Class) module.\n",
    "\n",
    "79. What is an abstract class?\n",
    "In general terms, an abstract class is a class that is intended to be used for inheritance. It cannot be instantiated. An abstract class can consist of both abstract and non-abstract methods.In C++, an abstract class is a class that contains at least one pure virtual function.In Java, an abstract class is declared with an abstract keyword.\n",
    "\n",
    "80. What is slicing in Python?\n",
    "As the name suggests, ‘slicing’ is taking parts of.\n",
    "Syntax for slicing is [start : stop : step]\n",
    "start is the starting index from where to slice a list or tuple\n",
    "stop is the ending index or where to sop.\n",
    "step is the number of steps to jump.\n",
    "Default value for start is 0, stop is number of items, step is 1.\n",
    "Slicing can be done on strings, arrays, lists, and tuples.\n",
    "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "print(numbers[1 : : 2])  #output : [2, 4, 6, 8, 10]\n",
    "\n",
    "81. What is docstring in Python?\n",
    "Documentation string or docstring is a multiline string used to document a specific code segment.\n",
    "The docstring should describe what the function or method does.\n",
    "\n",
    "82. What is the use of self in Python?\n",
    "Self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. It binds the attributes with the given arguments. self is used in different places and often thought to be a keyword. But unlike in C++, self is not a keyword in Python.\n",
    "\n",
    "83. What are global, protected and private attributes in Python?\n",
    "Global variables are public variables that are defined in the global scope. To use the variable in the global scope inside a function, we use the global keyword.\n",
    "Protected attributes are attributes defined with an underscore prefixed to their identifier eg. _sara. They can still be accessed and modified from outside the class they are defined in but a responsible developer should refrain from doing so.\n",
    "Private attributes are attributes with double underscore prefixed to their identifier eg. __ansh. They cannot be accessed or modified from the outside directly and will result in an AttributeError if such an attempt is made.\n",
    "\n",
    "84. What is a dynamically typed language?\n",
    "Before we understand a dynamically typed language, we should learn about what typing is. Typing refers to type-checking in programming languages. In a strongly-typed language, such as Python, \"1\" + 2 will result in a type error since these languages don't allow for \"type-coercion\" (implicit conversion of data types). On the other hand, a weakly-typed language, such as Javascript, will simply output \"12\" as result.\n",
    "Type-checking can be done at two stages -\n",
    "Static - Data Types are checked before execution.\n",
    "Dynamic - Data Types are checked during execution.\n",
    "Python is an interpreted language, executes each statement line by line and thus type-checking is done on the fly, during execution. Hence, Python is a Dynamically Typed Language.\n",
    "\n",
    "85. How is memory managed in Python?\n",
    "Memory management in Python is handled by the Python Memory Manager. The memory allocated by the manager is in form of a private heap space dedicated to Python. All Python objects are stored in this heap and being private, it is inaccessible to the programmer. Though, python does provide some core API functions to work upon the private heap space.\n",
    "Additionally, Python has an in-built garbage collection to recycle the unused memory for the private heap space.\n",
    "\n",
    "86. Explain how to delete a file in Python?\n",
    "Use command os.remove(file_name)\n",
    "import os\n",
    "os.remove(\"ChangedFile.csv\")\n",
    "print(\"File Removed!\")\n",
    "\n",
    "87. What are negative indexes and why are they used?\n",
    "Negative indexes are the indexes from the end of the list or tuple or string.\n",
    "Arr[-1] means the last element of array Arr[]\n",
    "arr = [1, 2, 3, 4, 5, 6]\n",
    "#get the last element\n",
    "print(arr[-1]) #output 6\n",
    "#get the second last element\n",
    "print(arr[-2]) #output 5\n",
    "\n",
    "88. What is _init_?\n",
    "_init_ is a contructor method in Python and is automatically called to allocate memory when a new object/instance is created. All classes have a _init_ method associated with them. It helps in distinguishing methods and attributes of a class from local variables.\n",
    "# class definition\n",
    "class Student:\n",
    "   def _init_(self, fname, lname, age, section):\n",
    "       self.firstname = fname\n",
    "       self.lastname = lname\n",
    "       self.age = age\n",
    "       self.section = section\n",
    "# creating a new object\n",
    "stu1 = Student(\"Sara\", \"Ansh\", 22, \"A2\")\n",
    "\n",
    "89. What is the difference between Python Arrays and lists?\n",
    "Arrays in python can only contain elements of same data types i.e., data type of array should be homogeneous. It is a thin wrapper around C language arrays and consumes far less memory than lists.\n",
    "Lists in python can contain elements of different data types i.e., data type of lists can be heterogeneous. It has the disadvantage of consuming large memory.\n",
    "import array\n",
    "a = array.array('i', [1, 2, 3])\n",
    "for i in a:\n",
    "    print(i, end=' ')    #OUTPUT: 1 2 3\n",
    "a = array.array('i', [1, 2, 'string'])    #OUTPUT: TypeError: an integer is required (got type str)\n",
    "a = [1, 2, 'string']\n",
    "for i in a:\n",
    "   print(i, end=' ')    #OUTPUT: 1 2 string\n",
    "\n",
    "90. What is slicing in Python?\n",
    "As the name suggests, ‘slicing’ is taking parts of.\n",
    "Syntax for slicing is [start : stop : step]\n",
    "start is the starting index from where to slice a list or tuple\n",
    "stop is the ending index or where to sop.\n",
    "step is the number of steps to jump.\n",
    "Default value for start is 0, stop is number of items, step is 1.\n",
    "Slicing can be done on strings, arrays, lists, and tuples.\n",
    "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "print(numbers[1 : : 2])  #output : [2, 4, 6, 8, 10]\n",
    "\n",
    "91. What is docstring in Python?\n",
    "Documentation string or docstring is a multiline string used to document a specific code segment.\n",
    "The docstring should describe what the function or method does.\n",
    "\n",
    "92. What are unit tests in Python?\n",
    "Unit test is a unit testing framework of Python. Unit testing means testing different components of software separately. Can you think about why unit testing is important? Imagine a scenario, you are building software that uses three components namely A, B, and C. Now, suppose your software breaks at a point time. How will you find which component was responsible for breaking the software? Maybe it was component A that failed, which in turn failed component B, and this actually failed the software. There can be many such combinations.\n",
    "This is why it is necessary to test each and every component properly so that we know which component might be highly responsible for the failure of the software.\n",
    "\n",
    "93. What is break, continue and pass in Python?\n",
    "Break-The break statement terminates the loop immediately and the control flows to the statement after the body of the loop.\n",
    "Continue-The continue statement terminates the current iteration of the statement, skips the rest of the code in the current iteration and the control flows to the next iteration of the loop.\n",
    "Pass-As explained above, the pass keyword in Python is generally used to fill up empty blocks and is similar to an empty statement represented by a semi-colon in languages such as Java, C++, Javascript, etc.\n",
    "pat = [1, 3, 2, 1, 2, 3, 1, 0, 1, 3]\n",
    "for p in pat:\n",
    "   pass\n",
    "   if (p == 0):\n",
    "       current = p\n",
    "       break\n",
    "   elif (p % 2 == 0):\n",
    "       continue\n",
    "   print(p)    # output => 1 3 1 3 1\n",
    "print(current)    # output => 0\n",
    "\n",
    "94. What is the use of self in Python?\n",
    "Self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. It binds the attributes with the given arguments. self is used in different places and often thought to be a keyword. But unlike in C++, self is not a keyword in Python.\n",
    "\n",
    "95. What are global, protected and private attributes in Python?\n",
    "Global variables are public variables that are defined in the global scope. To use the variable in the global scope inside a function, we use the global keyword.\n",
    "Protected attributes are attributes defined with an underscore prefixed to their identifier eg. _sara. They can still be accessed and modified from outside the class they are defined in but a responsible developer should refrain from doing so.\n",
    "Private attributes are attributes with double underscore prefixed to their identifier eg. __ansh. They cannot be accessed or modified from the outside directly and will result in an AttributeError if such an attempt is made.\n",
    "\n",
    "96. What are modules and packages in Python?\n",
    "Python packages and Python modules are two mechanisms that allow for modular programming in Python. Modularizing has several advantages -\n",
    "Simplicity: Working on a single module helps you focus on a relatively small portion of the problem at hand. This makes development easier and less error-prone.\n",
    "Maintainability: Modules are designed to enforce logical boundaries between different problem domains. If they are written in a manner that reduces interdependency, it is less likely that modifications in a module might impact other parts of the program.\n",
    "Reusability: Functions defined in a module can be easily reused by other parts of the application.\n",
    "Scoping: Modules typically define a separate namespace, which helps avoid confusion between identifiers from other parts of the program.\n",
    "Modules, in general, are simply Python files with a .py extension and can have a set of functions, classes, or variables defined and implemented. They can be imported and initialized once using the import statement. If partial functionality is needed, import the requisite classes or functions using from foo import bar.\n",
    "\n",
    "97. What is pass in Python?\n",
    "\n",
    "The pass keyword represents a null operation in Python. It is generally used for the purpose of filling up empty blocks of code which may execute during runtime but has yet to be written. Without the pass statement in the following code, we may run into some errors during code execution.\n",
    "\n",
    "def myEmptyFunc():\n",
    "   # do nothing\n",
    "   pass\n",
    "myEmptyFunc()    # nothing happens\n",
    "## Without the pass keyword\n",
    "# File \"<stdin>\", line 3\n",
    "# IndentationError: expected an indented block\n",
    "\n",
    "98. What are the common built-in data types in Python?\n",
    "There are several built-in data types in Python. Although, Python doesn't require data types to be defined explicitly during variable declarations type errors are likely to occur if the knowledge of data types and their compatibility with each other are neglected. Python provides type() and isinstance() functions to check the type of these variables. These data types can be grouped into the following categories-\n",
    "None Type:\n",
    "None keyword represents the null values in Python. Boolean equality operation can be performed using these NoneType objects.\n",
    "Class Name\tDescription\n",
    "NoneType\tRepresents the NULL values in Python.\n",
    "Numeric Types:\n",
    "There are three distinct numeric types - integers, floating-point numbers, and complex numbers. Additionally, booleans are a sub-type of integers.\n",
    "Class Name\tDescription\n",
    "int\tStores integer literals including hex, octal and binary numbers as integers\n",
    "float\tStores literals containing decimal values and/or exponent signs as floating-point numbers\n",
    "complex\tStores complex numbers in the form (A + Bj) and has attributes: real and imag\n",
    "bool\tStores boolean value (True or False).\n",
    "Note: The standard library also includes fractions to store rational numbers and decimal to store floating-point numbers with user-defined precision.\n",
    "Sequence Types:\n",
    "According to Python Docs, there are three basic Sequence Types - lists, tuples, and range objects. Sequence types have the in and not in operators defined for their traversing their elements. These operators share the same priority as the comparison operations.\n",
    "Class Name\tDescription\n",
    "list-Mutable sequence used to store collection of items.\n",
    "tuple-Immutable sequence used to store collection of items.\n",
    "range-Represents an immutable sequence of numbers generated during execution.\n",
    "str\tImmutable sequence of Unicode code points to store textual data.\n",
    "Note: The standard library also includes additional types for processing:\n",
    "1. Binary data such as bytearray bytes memoryview , and\n",
    "2. Text strings such as str.\n",
    "Mapping Types:\n",
    "A mapping object can map hashable values to random objects in Python. Mappings objects are mutable and there is currently only one standard mapping type, the dictionary.\n",
    "Class Name \tDescription\n",
    "dict\tStores comma-separated list of key: value pairs\n",
    "Set Types:\n",
    "Currently, Python has two built-in set types - set and frozenset. set type is mutable and supports methods like add() and remove(). frozenset type is immutable and can't be modified after creation.\n",
    "Class Name\tDescription\n",
    "set\tMutable unordered collection of distinct hashable objects.\n",
    "frozenset\tImmutable collection of distinct hashable objects.\n",
    "Note: set is mutable and thus cannot be used as key for a dictionary. On the other hand, frozenset is immutable and thus, hashable, and can be used as a dictionary key or as an element of another set.\n",
    "Modules:\n",
    "Module is an additional built-in type supported by the Python Interpreter. It supports one special operation, i.e., attribute access: mymod.myobj, where mymod is a module and myobj references a name defined in m's symbol table. The module's symbol table resides in a very special attribute of the module _dict_, but direct assignment to this module is neither possible nor recommended.\n",
    "Callable Types:\n",
    "Callable types are the types to which function call can be applied. They can be user-defined functions, instance methods, generator functions, and some other built-in functions, methods and classes.\n",
    "Refer to the documentation at docs.python.org for a detailed view of the callable types.\n",
    "Discover your path to a  \n",
    "Successful Tech Career!\n",
    "\n",
    "99. What are lists and tuples? What is the key difference between the two?\n",
    "Lists and Tuples are both sequence data types that can store a collection of objects in Python. The objects stored in both sequences can have different data types. Lists are represented with square brackets ['sara', 6, 0.19], while tuples are represented with parantheses ('ansh', 5, 0.97).\n",
    "But what is the real difference between the two? The key difference between the two is that while lists are mutable, tuples on the other hand are immutable objects. This means that lists can be modified, appended or sliced on the go but tuples remain constant and cannot be modified in any manner. You can run the following example on Python IDLE to confirm the difference:\n",
    "my_tuple = ('sara', 6, 5, 0.97)\n",
    "my_list = ['sara', 6, 5, 0.97]\n",
    "print(my_tuple[0])     # output => 'sara'\n",
    "print(my_list[0])     # output => 'sara'\n",
    "my_tuple[0] = 'ansh'    # modifying tuple => throws an error\n",
    "my_list[0] = 'ansh'    # modifying list => list modified\n",
    "print(my_tuple[0])     # output => 'sara'\n",
    "print(my_list[0])     # output => 'ansh'\n",
    "\n",
    "100. What is Scope in Python?\n",
    "Every object in Python functions within a scope. A scope is a block of code where an object in Python remains relevant. Namespaces uniquely identify all the objects inside a program. However, these namespaces also have a scope defined for them where you could use their objects without any prefix. A few examples of scope created during code execution in Python are as follows:\n",
    "A local scope refers to the local objects available in the current function.\n",
    "A global scope refers to the objects available throughout the code execution since their inception.\n",
    "A module-level scope refers to the global objects of the current module accessible in the program.\n",
    "An outermost scope refers to all the built-in names callable in the program. The objects in this scope are searched last to find the name referenced.\n",
    "Note: Local scope objects can be synced with global scope objects using keywords such as global.\n",
    "\n",
    "101. What is PEP 8 and why is it important?\n",
    "PEP stands for Python Enhancement Proposal. A PEP is an official design document providing information to the Python community, or describing a new feature for Python or its processes. PEP 8 is especially important since it documents the style guidelines for Python Code. Apparently contributing to the Python open-source community requires you to follow these style guidelines sincerely and strictly.\n",
    "\n",
    "102. What is an Interpreted language?\n",
    "An Interpreted language executes its statements line by line. Languages such as Python, Javascript, R, PHP, and Ruby are prime examples of Interpreted languages. Programs written in an interpreted language runs directly from the source code, with no intermediary compilation step.\n",
    "\n",
    "103. What is a dynamically typed language?\n",
    "Before we understand a dynamically typed language, we should learn about what typing is. Typing refers to type-checking in programming languages. In a strongly-typed language, such as Python, \"1\" + 2 will result in a type error since these languages don't allow for \"type-coercion\" (implicit conversion of data types). On the other hand, a weakly-typed language, such as Javascript, will simply output \"12\" as result.\n",
    "Type-checking can be done at two stages -\n",
    "Static - Data Types are checked before execution.\n",
    "Dynamic - Data Types are checked during execution.\n",
    "Python is an interpreted language, executes each statement line by line and thus type-checking is done on the fly, during execution. Hence, Python is a Dynamically Typed Language.\n",
    "\n",
    "104. What is Python? What are the benefits of using Python\n",
    "Python is a high-level, interpreted, general-purpose programming language. Being a general-purpose language, it can be used to build almost any type of application with the right tools/libraries. Additionally, python supports objects, modules, threads, exception-handling, and automatic memory management which help in modelling real-world problems and building applications to solve these problems.\n",
    "Benefits of using Python:\n",
    "\n",
    "Python is a general-purpose programming language that has a simple, easy-to-learn syntax that emphasizes readability  and therefore reduces the cost of program maintenance. Moreover, the language is capable of scripting, is completely open-source, and supports third-party packages encouraging modularity and code reuse.\n",
    "Its high-level data structures, combined with dynamic typing and dynamic binding, attract a huge community of developers for Rapid Application Development and deployment.\n",
    "\n",
    "105. What are Dict and List comprehensions?\n",
    "Python comprehensions, like decorators, are syntactic sugar constructs that help build altered and filtered lists, dictionaries, or sets from a given list, dictionary, or set. Using comprehensions saves a lot of time and code that might be considerably more verbose (containing more lines of code). Let's check out some examples, where comprehensions can be truly beneficial:\n",
    "Performing mathematical operations on the entire list\n",
    "my_list = [2, 3, 5, 7, 11]\n",
    "squared_list = [x**2 for x in my_list]    # list comprehension\n",
    "# output => [4 , 9 , 25 , 49 , 121]\n",
    "squared_dict = {x:x**2 for x in my_list}    # dict comprehension\n",
    "# output => {11: 121, 2: 4 , 3: 9 , 5: 25 , 7: 49}\n",
    "Performing conditional filtering operations on the entire list\n",
    "my_list = [2, 3, 5, 7, 11]\n",
    "squared_list = [x**2 for x in my_list if x%2 != 0]    # list comprehension\n",
    "# output => [9 , 25 , 49 , 121]\n",
    "squared_dict = {x:x**2 for x in my_list if x%2 != 0}    # dict comprehension\n",
    "# output => {11: 121, 3: 9 , 5: 25 , 7: 49}\n",
    "Combining multiple lists into one\n",
    "Comprehensions allow for multiple iterators and hence, can be used to combine multiple lists into one. \n",
    "a = [1, 2, 3]\n",
    "b = [7, 8, 9]\n",
    "[(x + y) for (x,y) in zip(a,b)]  # parallel iterators\n",
    "# output => [8, 10, 12]\n",
    "[(x,y) for x in a for y in b]    # nested iterators\n",
    "# output => [(1, 7), (1, 8), (1, 9), (2, 7), (2, 8), (2, 9), (3, 7), (3, 8), (3, 9)] \n",
    "Flattening a multi-dimensional list\n",
    "A similar approach of nested iterators (as above) can be applied to flatten a multi-dimensional list or work upon its inner elements. \n",
    "my_list = [[10,20,30],[40,50,60],[70,80,90]]\n",
    "flattened = [x for temp in my_list for x in temp]\n",
    "# output => [10, 20, 30, 40, 50, 60, 70, 80, 90]\n",
    "Note: List comprehensions have the same effect as the map method in other languages. They follow the mathematical set builder notation rather than map and filter functions in Python.\n",
    "\n",
    "106. What are decorators in Python?\n",
    "Decorators in Python are essentially functions that add functionality to an existing function in Python without changing the structure of the function itself. They are represented the @decorator_name in Python and are called in a bottom-up fashion. For example:\n",
    "# decorator function to convert to lowercase\n",
    "def lowercase_decorator(function):\n",
    "   def wrapper():\n",
    "       func = function()\n",
    "       string_lowercase = func.lower()\n",
    "       return string_lowercase\n",
    "   return wrapper\n",
    "# decorator function to split words\n",
    "def splitter_decorator(function):\n",
    "   def wrapper():\n",
    "       func = function()\n",
    "       string_split = func.split()\n",
    "       return string_split\n",
    "   return wrapper\n",
    "@splitter_decorator # this is executed next\n",
    "@lowercase_decorator # this is executed first\n",
    "def hello():\n",
    "   return 'Hello World'\n",
    "hello()   # output => [ 'hello' , 'world' ]\n",
    "The beauty of the decorators lies in the fact that besides adding functionality to the output of the method, they can even accept arguments for functions and can further modify those arguments before passing it to the function itself. The inner nested function, i.e. 'wrapper' function, plays a significant role here. It is implemented to enforce encapsulation and thus, keep itself hidden from the global scope.\n",
    "# decorator function to capitalize names\n",
    "def names_decorator(function):\n",
    "   def wrapper(arg1, arg2):\n",
    "       arg1 = arg1.capitalize()\n",
    "       arg2 = arg2.capitalize()\n",
    "       string_hello = function(arg1, arg2)\n",
    "       return string_hello\n",
    "   return wrapper\n",
    "@names_decorator\n",
    "def say_hello(name1, name2):\n",
    "   return 'Hello ' + name1 + '! Hello ' + name2 + '!'\n",
    "say_hello('sara', 'ansh')   # output => 'Hello Sara! Hello Ansh!'\n",
    "\n",
    "107. What is Scope Resolution in Python?\n",
    "Sometimes objects within the same scope have the same name but function differently. In such cases, scope resolution comes into play in Python automatically. A few examples of such behavior are:\n",
    "Python modules namely 'math' and 'cmath' have a lot of functions that are common to both of them - log10(), acos(), exp() etc. To resolve this ambiguity, it is necessary to prefix them with their respective module, like math.exp() and cmath.exp().\n",
    "Consider the code below, an object temp has been initialized to 10 globally and then to 20 on function call. However, the function call didn't change the value of the temp globally. Here, we can observe that Python draws a clear line between global and local variables, treating their namespaces as separate identities.\n",
    "temp = 10   # global-scope variable\n",
    "def func():\n",
    "     temp = 20   # local-scope variable\n",
    "     print(temp)\n",
    "print(temp)   # output => 10\n",
    "func()    # output => 20\n",
    "print(temp)   # output => 10\n",
    "This behavior can be overridden using the global keyword inside the function, as shown in the following example:\n",
    "temp = 10   # global-scope variable\n",
    "def func():\n",
    "     global temp\n",
    "     temp = 20   # local-scope variable\n",
    "     print(temp)\n",
    "print(temp)   # output => 10\n",
    "func()    # output => 20\n",
    "print(temp)   # output => 20\n",
    "\n",
    "108. What are Python namespaces? Why are they used?\n",
    "A namespace in Python ensures that object names in a program are unique and can be used without any conflict. Python implements these namespaces as dictionaries with 'name as key' mapped to a corresponding 'object as value'. This allows for multiple namespaces to use the same name and map it to a separate object. A few examples of namespaces are as follows:\n",
    "Local Namespace includes local names inside a function. the namespace is temporarily created for a function call and gets cleared when the function returns.\n",
    "Global Namespace includes names from various imported packages/ modules that are being used in the current project. This namespace is created when the package is imported in the script and lasts until the execution of the script.\n",
    "Built-in Namespace includes built-in functions of core Python and built-in names for various types of exceptions.\n",
    "The lifecycle of a namespace depends upon the scope of objects they are mapped to. If the scope of an object ends, the lifecycle of that namespace comes to an end. Hence, it isn't possible to access inner namespace objects from an outer namespace.\n",
    "\n",
    "109. How is memory managed in Python?\n",
    "Memory management in Python is handled by the Python Memory Manager. The memory allocated by the manager is in form of a private heap space dedicated to Python. All Python objects are stored in this heap and being private, it is inaccessible to the programmer. Though, python does provide some core API functions to work upon the private heap space.\n",
    "Additionally, Python has an in-built garbage collection to recycle the unused memory for the private heap space.\n",
    "\n",
    "110. What is lambda in Python? Why is it used?\n",
    "Lambda is an anonymous function in Python, that can accept any number of arguments, but can only have a single expression. It is generally used in situations requiring an anonymous function for a short time period. Lambda functions can be used in either of the two ways:\n",
    "Assigning lambda functions to a variable:\n",
    "mul = lambda a, b : a * b\n",
    "print(mul(2, 5))    # output => 10\n",
    "Wrapping lambda functions inside another function:\n",
    "def myWrapper(n):\n",
    " return lambda a : a * n\n",
    "mulFive = myWrapper(5)\n",
    "print(mulFive(2))    # output => 10\n",
    "\n",
    "111. Explain how to delete a file in Python?\n",
    "Use command os.remove(file_name)\n",
    "import os\n",
    "os.remove(\"ChangedFile.csv\")\n",
    "print(\"File Removed!\")\n",
    "\n",
    "112. What are negative indexes and why are they used?\n",
    "Negative indexes are the indexes from the end of the list or tuple or string.\n",
    "Arr[-1] means the last element of array Arr[]\n",
    "arr = [1, 2, 3, 4, 5, 6]\n",
    "#get the last element\n",
    "print(arr[-1]) #output 6\n",
    "#get the second last element\n",
    "print(arr[-2]) #output 5\n",
    "\n",
    "113. Explain split() and join() functions in Python?\n",
    "You can use split() function to split a string based on a delimiter to a list of strings.\n",
    "You can use join() function to join a list of strings based on a delimiter to give a single string.\n",
    "string = \"This is a string.\"\n",
    "string_list = string.split(' ') #delimiter is ‘space’ character or ‘ ‘\n",
    "print(string_list) #output: ['This', 'is', 'a', 'string.']\n",
    "print(' '.join(string_list)) #output: This is a string.\n",
    "\n",
    "114. How are arguments passed by value or by reference in python?\n",
    "Pass by value: Copy of the actual object is passed. Changing the value of the copy of the object will not change the value of the original object.\n",
    "Pass by reference: Reference to the actual object is passed. Changing the value of the new object will change the value of the original object.\n",
    "In Python, arguments are passed by reference, i.e., reference to the actual object is passed.\n",
    "def appendNumber(arr):\n",
    "   arr.append(4)\n",
    "arr = [1, 2, 3]\n",
    "print(arr)  #Output: => [1, 2, 3]\n",
    "appendNumber(arr)\n",
    "print(arr)  #Output: => [1, 2, 3, 4]\n",
    "\n",
    "115. What is the difference between .py and .pyc files?\n",
    ".py files contain the source code of a program. Whereas, .pyc file contains the bytecode of your program. We get bytecode after compilation of .py file (source code). .pyc files are not created for all the files that you run. It is only created for the files that you import.\n",
    "Before executing a python program python interpreter checks for the compiled files. If the file is present, the virtual machine executes it. If not found, it checks for .py file. If found, compiles it to .pyc file and then python virtual machine executes it.\n",
    "Having .pyc file saves you the compilation time.\n",
    "\n",
    "116. What is PYTHONPATH in Python?\n",
    "PYTHONPATH is an environment variable which you can set to add additional directories where Python will look for modules and packages. This is especially useful in maintaining Python libraries that you do not wish to install in the global default location.\n",
    "\n",
    "117. What are generators in Python?\n",
    "Generators are functions that return an iterable collection of items, one at a time, in a set manner. Generators, in general, are used to create iterators with a different approach. They employ the use of yield keyword rather than return to return a generator object.\n",
    "\n",
    "118. How do you copy an object in Python?\n",
    "In Python, the assignment statement (= operator) does not copy objects. Instead, it creates a binding between the existing object and the target variable name. To create copies of an object in Python, we need to use the copy module. Moreover, there are two ways of creating copies for the given object using the copy module -\n",
    "Shallow Copy is a bit-wise copy of an object. The copied object created has an exact copy of the values in the original object. If either of the values is a reference to other objects, just the reference addresses for the same are copied.\n",
    "Deep Copy copies all values recursively from source to target object, i.e. it even duplicates the objects referenced by the source object.\n",
    "How will you check if a class is a child of another class?\n",
    "This is done by using a method called issubclass() provided by python. The method tells us if any class is a child of another class by returning true or false accordingly.\n",
    "For example:\n",
    "class Parent(object):\n",
    "   pass   \n",
    " \n",
    "class Child(Parent):\n",
    "   pass   \n",
    " \n",
    "# Driver Code\n",
    "print(issubclass(Child, Parent))    #True\n",
    "print(issubclass(Parent, Child))    #False\n",
    "We can check if an object is an instance of a class by making use of isinstance() method:\n",
    "obj1 = Child()\n",
    "obj2 = Parent()\n",
    "print(isinstance(obj2, Child))    #False \n",
    "print(isinstance(obj2, Parent))   #True \n",
    "\n",
    "119. Why is finalize used?\n",
    "Finalize method is used for freeing up the unmanaged resources and clean up before the garbage collection method is invoked. This helps in performing memory management tasks.\n",
    "\n",
    "120. Differentiate between new and override modifiers.\n",
    "The new modifier is used to instruct the compiler to use the new implementation and not the base class function. The Override modifier is useful for overriding a base class function inside the child class.\n",
    "\n",
    "121. How is an empty class created in python?\n",
    "An empty class does not have any members defined in it. It is created by using the pass keyword (the pass command does nothing in python). We can create objects for this class outside the class.\n",
    "For example-\n",
    "class EmptyClassDemo:\n",
    "   pass\n",
    "obj=EmptyClassDemo()\n",
    "obj.name=\"Interviewbit\"\n",
    "print(\"Name created= \",obj.name)\n",
    "Output:\n",
    "Name created = Interviewbit\n",
    "\n",
    "122. How Is Multithreading Achieved in Python?\n",
    "Multithreading usually implies that multiple threads are executed concurrently. The Python Global Interpreter Lock doesn't allow more than one thread to hold the Python interpreter at that particular point of time. So multithreading in python is achieved through context switching. It is quite different from multiprocessing which actually opens up multiple processes across multiple threads.\n",
    "\n",
    "123. What is the Difference Between a Shallow Copy and Deep Copy?\n",
    "Deepcopy creates a different object and populates it with the child objects of the original object. Therefore, changes in the original object are not reflected in the copy.\n",
    "copy.deepcopy() creates a Deep Copy.\n",
    "Shallow copy creates a different object and populates it with the references of the child objects within the original object. Therefore, changes in the original object are reflected in the copy.\n",
    "copy.copy creates a Shallow Copy.\n",
    "\n",
    "124. How Is Multithreading Achieved in Python?\n",
    "Multithreading usually implies that multiple threads are executed concurrently. The Python Global Interpreter Lock doesn't allow more than one thread to hold the Python interpreter at that particular point of time. So multithreading in python is achieved through context switching. It is quite different from multiprocessing which actually opens up multiple processes across multiple threads.\n",
    "\n",
    "125. Discuss Django Architecture.\n",
    "Here you can also find a comprehensive guide on Python Django Tutorial that is very easy to understand.\n",
    "Django is a web service used to build your web pages. Its architecture is as shown:\n",
    "Template: the front end of the web page \n",
    "Model: the back end where the data is stored \n",
    "View: It interacts with the model and template and maps it to the URL\n",
    "Django: serves the page to the user \n",
    "\n",
    "126. What Advantage Does the Numpy Array Have over a Nested List?\n",
    "Numpy is written in C so that all its complexities are backed into a simple to use a module. Lists, on the other hand, are dynamically typed. Therefore, Python must check the data type of each element every time it uses it. This makes Numpy arrays much faster than lists.\n",
    "Numpy has a lot of additional functionality that list doesn’t offer; for instance, a lot of things can be automated in Numpy.\n",
    "\n",
    "127. What are Pickling and Unpickling?\n",
    "Converting a Python object hierarchy to a byte stream is called pickling\n",
    "Pickling is also referred to as serialization\n",
    "Converting a byte stream to a Python object hierarchy is called unpickling\n",
    "Unpickling is also referred to as deserialization \n",
    "If you just created a neural network model, you can save that model to your hard drive, pickle it, and then unpickle to bring it back into another software program or to use it at a later time.\n",
    "\n",
    "128. How is Memory managed in Python?\n",
    "Python has a private heap space that stores all the objects. The Python memory manager regulates various aspects of this heap, such as sharing, caching, segmentation, and allocation. The user has no control over the heap; only the Python interpreter has access.\n",
    "\n",
    "129. Are Arguments in Python Passed by Value or by Reference?\n",
    "Arguments are passed in python by a reference. This means that any changes made within a function are reflected in the original object.\n",
    "Consider two sets of code shown below:\n",
    "Python Function\n",
    "In the first example, we only assigned a value to one element of ‘l’, so the output is [3, 2, 3, 4].\n",
    "In the second example, we have created a whole new object for ‘l’. But, the values [3, 2, 3, 4] doesn’t show up in the output as it is outside the definition of the function.\n",
    "\n",
    "130. How Would You Generate Random Numbers in Python?\n",
    "To generate random numbers in Python, you must first import the random module. \n",
    "The random() function generates a random float value between 0 & 1.\n",
    "> random.random()\n",
    "\n",
    "The randrange() function generates a random number within a given range.\n",
    "Syntax: randrange(beginning, end, step)\n",
    "Example - > random.randrange(1,10,2)\n",
    "\n",
    "131. What Does the // Operator Do?\n",
    "In Python, the / operator performs division and returns the quotient in the float.\n",
    "For example: 5 / 2 returns 2.5\n",
    "The // operator, on the other hand, returns the quotient in integer.\n",
    "For example: 5 // 2 returns 2\n",
    "\n",
    "132. What Does the ‘is’ Operator Do?\n",
    "The ‘is’ operator compares the id of the two objects. \n",
    "list1=[1,2,3]\n",
    "list2=[1,2,3]\n",
    "list3=list1\n",
    "list1 == list2 🡪 True\n",
    "list1 is list2 🡪 False\n",
    "list1 is list3 🡪 True\n",
    "\n",
    "133. What Is the Purpose of the Pass Statement?\n",
    "The pass statement is used when there's a syntactic but not an operational requirement. For example - The program below prints a string ignoring the spaces.\n",
    "var=\"Si mplilea rn\"\n",
    "for i in var:\n",
    "  if i==\" \":\n",
    "    pass\n",
    "  else:\n",
    "    print(i,end=\"\")\n",
    "Here, the pass statement refers to ‘no action required.\n",
    "\n",
    "134. How Will You Check If All the Characters in a String Are Alphanumeric?\n",
    "Python has an inbuilt method isalnum() which returns true if all characters in the string are alphanumeric. \n",
    "Example - \n",
    ">> \"abcd123\".isalnum()\n",
    "\n",
    "Output: True\n",
    "\n",
    ">>”abcd@123#”.isalnum()\n",
    "\n",
    "Output: False\n",
    "Another way is to use regex as shown.\n",
    "\n",
    ">>import re\n",
    ">>bool(re.match(‘[A-Za-z0-9]+$','abcd123’))\n",
    "\n",
    "Output: True\n",
    ">> bool(re.match(‘[A-Za-z0-9]+$','abcd@123’))\n",
    "\n",
    "Output: False\n",
    "\n",
    "135. How Will You Merge Elements in a Sequence?\n",
    "This is one of the most asked python basic interview question. There are three types of sequences in Python:\n",
    "Lists \n",
    "Tuples \n",
    "Strings\n",
    "Example of Lists - \n",
    ">>l1=[1,2,3]\n",
    ">>l2=[4,5,6]\n",
    ">>l1+l2\n",
    "\n",
    "Output: [1,2,3,4,5,6]\n",
    "Example of Tuples - \n",
    ">>t1=(1,2,3)\n",
    ">>t2=(4,5,6)\n",
    ">>t1+t2\n",
    "\n",
    "Output: (1,2,3,4,5,6)\n",
    "Example of String - \n",
    ">>s1=“Simpli”\n",
    ">>s2=“learn”\n",
    ">>s1+s2\n",
    "\n",
    "Output: ‘Simplilearn’\n",
    "\n",
    "136. How Would You Remove All Leading Whitespace in a String?\n",
    "Python provides the inbuilt function lstrip() to remove all leading spaces from a string.\n",
    ">>“      Python”.lstrip\n",
    "\n",
    "Output: Python\n",
    "\n",
    "137. How Would You Replace All Occurrences of a Substring with a New String?\n",
    "The replace() function can be used with strings for replacing a substring with a given string. Syntax: \n",
    "str.replace(old, new, count)\n",
    "replace() returns a new string without modifying the original string.\n",
    "Example - \n",
    ">>\"Hey John. How are you, John?\".replace(“john\",“John\",1)\n",
    "\n",
    "Output: “Hey John. How are you, John?\n",
    "\n",
    "138. How Do You Display the Contents of a Text File in Reverse Order?\n",
    "This is one of the most asked python basic interview question. You can display the contents of a text file in reverse order using the following steps:\n",
    "Open the file using the open() function \n",
    "Store the contents of the file into a list \n",
    "Reverse the contents of the list\n",
    "Run a for loop to iterate through the list\n",
    "\n",
    "139. Is Python Object-oriented or Functional Programming?\n",
    "Python is considered a multi-paradigm language.Python follows the object-oriented paradigm.Python allows the creation of objects and their manipulation through specific methods .It supports most of the features of OOPS such as inheritance and polymorphism\n",
    "Python follows the functional programming paradigm.Functions may be used as the first-class object \n",
    "Python supports Lambda functions which are characteristic of the functional paradigm \n",
    "\n",
    "140. “in Python, Functions Are First-class Objects.” What Do You Infer from This?\n",
    "It means that a function can be treated just like an object. You can assign them to variables, or pass them as arguments to other functions. You can even return them from other functions.\n",
    "\n",
    "141. What Is a Numpy Array?\n",
    "A numpy array is a grid of values, all of the same type, and is indexed by a tuple of non-negative integers. The number of dimensions determines the rank of the array. The shape of an array is a tuple of integers giving the size of the array along each dimension.\n",
    "\n",
    "142. How Can You Copy Objects in Python?\n",
    "This is one of the most frequently asked python technical interview question. \n",
    "The function used to copy objects in Python are:\n",
    "copy.copy for shallow copy and\n",
    "copy.deepcopy() for deep copy"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
